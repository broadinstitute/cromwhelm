{{- if .Values.cromwell.enabled }}
{{ include "terra-batch-libchart.cromwell-deploy" (list . "coa-helm.cromwell-deploy") }}
{{ end }}
{{ define "coa-helm.cromwell-deploy" }}
spec:
  template:
    metadata:
      labels:
    {{ include "coa-helm.labels" $ | nindent 8 }}
        leoServiceName: cromwell
    spec:
      containers:
        - env:
            # Parse application insights instrumentation key (uuid) out of connection string
            - name: APPINSIGHTS_INSTRUMENTATIONKEY
              value: {{ mustRegexReplaceAll ".*InstrumentationKey=([-0-9a-f]*).*" .Values.config.applicationInsightsConnectionString  "${1}" | quote }}
          args:
            - java 
              -Djava.io.tmpdir=/cromwell-tmp/ 
              -Dconfig.file=/configuration/cromwell/cromwell-application.conf 
              -Dlogback.configurationFile=/configuration/cromwell/logback.xml 
              -jar /app/cromwell.jar 
              server
          command:
            - /bin/sh
            - -c
          image: {{ .Values.cromwell.image }}
          name: cromwell
          stdin: true
          tty: true
          ports:
            - containerPort: {{ .Values.cromwell.port }}
          resources:
            requests:
              memory: "1024Mi"
              cpu: "1.0"
            limits:
              memory: "4096Mi"
              cpu: "8.0"
          volumeMounts:
            - mountPath: /cromwell-tmp
              name: cromwell-tmp-claim
            - mountPath: /configuration/cromwell
              name: cromwell-config-volume
          livenessProbe:
            httpGet:
              path: engine/{{ .Values.cromwell.apiVersion }}/status
              port: 8000
            initialDelaySeconds: 120
            periodSeconds: 60
      restartPolicy: Always
      volumes:
        - name: cromwell-tmp-claim
          persistentVolumeClaim:
            claimName: cromwell-tmp-claim
        - name: cromwell-config-volume
          configMap:
            name: {{ include "app.fullname" . }}-cromwell-config
      tolerations:
        - key: "kubernetes.azure.com/scalesetpriority"
          operator: "Equal"
          value: "spot"
          effect: "NoSchedule"
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: "kubernetes.azure.com/scalesetpriority"
                operator: In
                values:
                - "spot"
status: {}
{{ end }}

---
{{- if .Values.cromwell.enabled }}
{{ include "terra-batch-libchart.cromwell-service" (list . "coa-helm.cromwell-service") }}
{{ end }}
{{ define "coa-helm.cromwell-service" }}
status:
  loadBalancer: {}
{{ end }}

---
{{- if .Values.cromwell.enabled }}
{{ include "terra-batch-libchart.cromwell-config" (list . "coa-helm.cromwell-config") }}
{{ end }}
{{ define "coa-helm.cromwell-config" }}
data:
  logback.xml: |-
    <configuration>
      <!-- Enhanced thread and date reporting. -->
      <conversionRule
              conversionWord="et"
              converterClass="cromwell.core.logging.EnhancedThreadConverter"
      />
      <conversionRule
              conversionWord="ed"
              converterClass="cromwell.core.logging.EnhancedDateConverter"
      />

      <appender name="AppInsightsAppender" class="com.microsoft.applicationinsights.logback.ApplicationInsightsAppender" />

      <root level="INFO">
          <appender-ref ref="AppInsightsAppender" />
      </root>

      <logger name="liquibase" level="WARN"/>
      <logger name="com.zaxxer.hikari" level="ERROR"/>
      <logger name="HikariPool" level="ERROR"/>
      <logger name="com.google.cloud.hadoop.gcsio.GoogleCloudStorageReadChannel" level="ERROR"/>
      <logger name="org.semanticweb.owlapi.utilities.Injector" level="ERROR"/>

      <!-- Guilty of logging ERROR under non-erroneous conditions -->
      <logger name="com.azure.storage.blob.nio" level="OFF"/>
    </configuration>

  cromwell-application.conf: |-
    include required(classpath("application"))

    call-caching {
      enabled = false
    }

    system {
      max-concurrent-workflows = 100
      new-workflow-poll-rate = 10
      max-workflow-launch-count = 10
      max-scatter-width-per-scatter = 35000
      total-max-jobs-per-root-workflow = 200000
      job-rate-control {
        jobs = 20
        per = 5 seconds
      }
      job-restart-check-rate-control {
        jobs = 30
        per = 1 seconds
      }

      input-read-limits {
        lines = 1000000
        json = 10000000
        tsv = 10000000
        object = 10000000
        bool = 7
        int = 19
        float = 50
        string = 128000
        map = 128000
      }
      # Accommodates IO commands that take 10 seconds because they block on refreshing the filesystem token,
      # plus margin for variability. Backpressure only works as designed when staleness is configured above
      # the normal range of IO durations. [WX-861]
      io.command-backpressure-staleness = 20 seconds
    }

    filesystems {
      drs.global.config.martha.url = "{{ .Values.config.drsUrl }}"
      blob {
        class = "cromwell.filesystems.blob.BlobPathBuilderFactory"
        global {
          class = "cromwell.filesystems.blob.BlobFileSystemManager"
          config {
            workspace-manager: {
              url: "{{ .Values.persistence.workspaceManager.url }}"
              workspace-id: "{{ .Values.persistence.workspaceManager.workspaceId }}"
              container-resource-id: "{{ .Values.persistence.workspaceManager.containerResourceId }}"
            }
            container: "{{ .Values.persistence.blobContainer }}"
            endpoint: "https://{{ .Values.persistence.storageAccount }}.blob.core.windows.net"
          }
        }
      }
    }

    engine {
      filesystems {
        local {
          enabled: false
        }
        http {
          enabled: true
        }
        blob {
          enabled: true
        }
        drs {
          enabled: true
          auth: "azure"
        }
      }
    }

    backend {
      default = "TES"
      providers {
        TES {
          actor-factory = "cromwell.backend.impl.tes.TesBackendLifecycleActorFactory"
          config {
            filesystems {
              http {
                enabled: true
              }
              local {
                enabled: false
              }
              blob {
                enabled: true
              }
            }
            root = "https://{{ .Values.persistence.storageAccount }}.blob.core.windows.net/{{ .Values.persistence.blobContainer }}/workspace-services/cbas/{{ .Values.persistence.leoAppInstanceName }}/"
            dockerRoot = "/cromwell-executions"
            endpoint = "http://{{ include "app.fullname" . }}-tes-svc:{{ .Values.tes.port }}/v1/tasks"
            use_tes_11_preview_backend_parameters = true
            workflow-execution-identity = "{{ .Values.identity.name }}"
            default-runtime-attributes {
              cpu: 1
              failOnStderr: false
              continueOnReturnCode: 0
              memory: "2 GB"
              disk: "10 GB"
              preemptible: true
            }
            poll-backoff {
              min: "1 minutes"
              max: "5 minutes"
              multiplier: 1.1
              randomization-factor: 0.5
            }
            execute-or-recover-backoff {
              min: "3 seconds"
              max: "30 seconds"
              multiplier: 1.1
              randomization-factor: 0.5
            }
          }
        }
      }
    }

{{ include "terra-batch-libchart.cromwell-config.database.conf" . | indent 4 }}
{{ end }}
